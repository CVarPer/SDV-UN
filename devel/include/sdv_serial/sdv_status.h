// Generated by gencpp from file sdv_serial/sdv_status.msg
// DO NOT EDIT!


#ifndef SDV_SERIAL_MESSAGE_SDV_STATUS_H
#define SDV_SERIAL_MESSAGE_SDV_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sdv_serial
{
template <class ContainerAllocator>
struct sdv_status_
{
  typedef sdv_status_<ContainerAllocator> Type;

  sdv_status_()
    : header()
    , energized(false)
    , stand_by(false)
    , rotate(false)
    , turn_left(false)
    , turn_right(false)
    , reverse(false)
    , forward(false)
    , low_batt(false)
    , emergency_stop(false)
    , reset_pc(false)
    , poweroff_pc(false)
    , obstacle_stop(false)
    , over_load(false)
    , connection_error(false)
    , tag_disconnected(false)
    , tag_init(false)
    , tag_is_on_platform(false)
    , tag_read_error(false)
    , tag_write_error(false)
    , tag_close(false)
    , not_connection_error(false)
    , connection_error_imu(false)
    , connection_error_msp(false)
    , connection_error_rfid(false)
    , connection_error_ult(false)
    , connection_error_batt(false)  {
    }
  sdv_status_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , energized(false)
    , stand_by(false)
    , rotate(false)
    , turn_left(false)
    , turn_right(false)
    , reverse(false)
    , forward(false)
    , low_batt(false)
    , emergency_stop(false)
    , reset_pc(false)
    , poweroff_pc(false)
    , obstacle_stop(false)
    , over_load(false)
    , connection_error(false)
    , tag_disconnected(false)
    , tag_init(false)
    , tag_is_on_platform(false)
    , tag_read_error(false)
    , tag_write_error(false)
    , tag_close(false)
    , not_connection_error(false)
    , connection_error_imu(false)
    , connection_error_msp(false)
    , connection_error_rfid(false)
    , connection_error_ult(false)
    , connection_error_batt(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _energized_type;
  _energized_type energized;

   typedef uint8_t _stand_by_type;
  _stand_by_type stand_by;

   typedef uint8_t _rotate_type;
  _rotate_type rotate;

   typedef uint8_t _turn_left_type;
  _turn_left_type turn_left;

   typedef uint8_t _turn_right_type;
  _turn_right_type turn_right;

   typedef uint8_t _reverse_type;
  _reverse_type reverse;

   typedef uint8_t _forward_type;
  _forward_type forward;

   typedef uint8_t _low_batt_type;
  _low_batt_type low_batt;

   typedef uint8_t _emergency_stop_type;
  _emergency_stop_type emergency_stop;

   typedef uint8_t _reset_pc_type;
  _reset_pc_type reset_pc;

   typedef uint8_t _poweroff_pc_type;
  _poweroff_pc_type poweroff_pc;

   typedef uint8_t _obstacle_stop_type;
  _obstacle_stop_type obstacle_stop;

   typedef uint8_t _over_load_type;
  _over_load_type over_load;

   typedef uint8_t _connection_error_type;
  _connection_error_type connection_error;

   typedef uint8_t _tag_disconnected_type;
  _tag_disconnected_type tag_disconnected;

   typedef uint8_t _tag_init_type;
  _tag_init_type tag_init;

   typedef uint8_t _tag_is_on_platform_type;
  _tag_is_on_platform_type tag_is_on_platform;

   typedef uint8_t _tag_read_error_type;
  _tag_read_error_type tag_read_error;

   typedef uint8_t _tag_write_error_type;
  _tag_write_error_type tag_write_error;

   typedef uint8_t _tag_close_type;
  _tag_close_type tag_close;

   typedef uint8_t _not_connection_error_type;
  _not_connection_error_type not_connection_error;

   typedef uint8_t _connection_error_imu_type;
  _connection_error_imu_type connection_error_imu;

   typedef uint8_t _connection_error_msp_type;
  _connection_error_msp_type connection_error_msp;

   typedef uint8_t _connection_error_rfid_type;
  _connection_error_rfid_type connection_error_rfid;

   typedef uint8_t _connection_error_ult_type;
  _connection_error_ult_type connection_error_ult;

   typedef uint8_t _connection_error_batt_type;
  _connection_error_batt_type connection_error_batt;





  typedef boost::shared_ptr< ::sdv_serial::sdv_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdv_serial::sdv_status_<ContainerAllocator> const> ConstPtr;

}; // struct sdv_status_

typedef ::sdv_serial::sdv_status_<std::allocator<void> > sdv_status;

typedef boost::shared_ptr< ::sdv_serial::sdv_status > sdv_statusPtr;
typedef boost::shared_ptr< ::sdv_serial::sdv_status const> sdv_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdv_serial::sdv_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdv_serial::sdv_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdv_serial::sdv_status_<ContainerAllocator1> & lhs, const ::sdv_serial::sdv_status_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.energized == rhs.energized &&
    lhs.stand_by == rhs.stand_by &&
    lhs.rotate == rhs.rotate &&
    lhs.turn_left == rhs.turn_left &&
    lhs.turn_right == rhs.turn_right &&
    lhs.reverse == rhs.reverse &&
    lhs.forward == rhs.forward &&
    lhs.low_batt == rhs.low_batt &&
    lhs.emergency_stop == rhs.emergency_stop &&
    lhs.reset_pc == rhs.reset_pc &&
    lhs.poweroff_pc == rhs.poweroff_pc &&
    lhs.obstacle_stop == rhs.obstacle_stop &&
    lhs.over_load == rhs.over_load &&
    lhs.connection_error == rhs.connection_error &&
    lhs.tag_disconnected == rhs.tag_disconnected &&
    lhs.tag_init == rhs.tag_init &&
    lhs.tag_is_on_platform == rhs.tag_is_on_platform &&
    lhs.tag_read_error == rhs.tag_read_error &&
    lhs.tag_write_error == rhs.tag_write_error &&
    lhs.tag_close == rhs.tag_close &&
    lhs.not_connection_error == rhs.not_connection_error &&
    lhs.connection_error_imu == rhs.connection_error_imu &&
    lhs.connection_error_msp == rhs.connection_error_msp &&
    lhs.connection_error_rfid == rhs.connection_error_rfid &&
    lhs.connection_error_ult == rhs.connection_error_ult &&
    lhs.connection_error_batt == rhs.connection_error_batt;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdv_serial::sdv_status_<ContainerAllocator1> & lhs, const ::sdv_serial::sdv_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdv_serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sdv_serial::sdv_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdv_serial::sdv_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdv_serial::sdv_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdv_serial::sdv_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_serial::sdv_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_serial::sdv_status_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdv_serial::sdv_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5e0403860ad18cd570582530bdd6690";
  }

  static const char* value(const ::sdv_serial::sdv_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5e0403860ad18cdULL;
  static const uint64_t static_value2 = 0x570582530bdd6690ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdv_serial::sdv_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdv_serial/sdv_status";
  }

  static const char* value(const ::sdv_serial::sdv_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdv_serial::sdv_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# sdv_status.msg\n"
"\n"
"Header header\n"
"bool energized\n"
"bool stand_by\n"
"bool rotate\n"
"bool turn_left\n"
"bool turn_right\n"
"bool reverse\n"
"bool forward\n"
"bool low_batt\n"
"bool emergency_stop\n"
"bool reset_pc\n"
"bool poweroff_pc\n"
"bool obstacle_stop\n"
"bool over_load\n"
"bool connection_error\n"
"bool tag_disconnected\n"
"bool tag_init\n"
"bool tag_is_on_platform\n"
"bool tag_read_error\n"
"bool tag_write_error\n"
"bool tag_close\n"
"bool not_connection_error\n"
"bool connection_error_imu\n"
"bool connection_error_msp\n"
"bool connection_error_rfid\n"
"bool connection_error_ult\n"
"bool connection_error_batt\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sdv_serial::sdv_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdv_serial::sdv_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.energized);
      stream.next(m.stand_by);
      stream.next(m.rotate);
      stream.next(m.turn_left);
      stream.next(m.turn_right);
      stream.next(m.reverse);
      stream.next(m.forward);
      stream.next(m.low_batt);
      stream.next(m.emergency_stop);
      stream.next(m.reset_pc);
      stream.next(m.poweroff_pc);
      stream.next(m.obstacle_stop);
      stream.next(m.over_load);
      stream.next(m.connection_error);
      stream.next(m.tag_disconnected);
      stream.next(m.tag_init);
      stream.next(m.tag_is_on_platform);
      stream.next(m.tag_read_error);
      stream.next(m.tag_write_error);
      stream.next(m.tag_close);
      stream.next(m.not_connection_error);
      stream.next(m.connection_error_imu);
      stream.next(m.connection_error_msp);
      stream.next(m.connection_error_rfid);
      stream.next(m.connection_error_ult);
      stream.next(m.connection_error_batt);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct sdv_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdv_serial::sdv_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdv_serial::sdv_status_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "energized: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.energized);
    s << indent << "stand_by: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stand_by);
    s << indent << "rotate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.rotate);
    s << indent << "turn_left: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_left);
    s << indent << "turn_right: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.turn_right);
    s << indent << "reverse: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reverse);
    s << indent << "forward: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.forward);
    s << indent << "low_batt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.low_batt);
    s << indent << "emergency_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.emergency_stop);
    s << indent << "reset_pc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.reset_pc);
    s << indent << "poweroff_pc: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.poweroff_pc);
    s << indent << "obstacle_stop: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.obstacle_stop);
    s << indent << "over_load: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.over_load);
    s << indent << "connection_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error);
    s << indent << "tag_disconnected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_disconnected);
    s << indent << "tag_init: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_init);
    s << indent << "tag_is_on_platform: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_is_on_platform);
    s << indent << "tag_read_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_read_error);
    s << indent << "tag_write_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_write_error);
    s << indent << "tag_close: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tag_close);
    s << indent << "not_connection_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.not_connection_error);
    s << indent << "connection_error_imu: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error_imu);
    s << indent << "connection_error_msp: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error_msp);
    s << indent << "connection_error_rfid: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error_rfid);
    s << indent << "connection_error_ult: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error_ult);
    s << indent << "connection_error_batt: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.connection_error_batt);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDV_SERIAL_MESSAGE_SDV_STATUS_H
