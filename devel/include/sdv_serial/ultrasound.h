// Generated by gencpp from file sdv_serial/ultrasound.msg
// DO NOT EDIT!


#ifndef SDV_SERIAL_MESSAGE_ULTRASOUND_H
#define SDV_SERIAL_MESSAGE_ULTRASOUND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace sdv_serial
{
template <class ContainerAllocator>
struct ultrasound_
{
  typedef ultrasound_<ContainerAllocator> Type;

  ultrasound_()
    : header()
    , sensor_1(0)
    , sensor_2(0)
    , sensor_3(0)
    , sensor_4(0)
    , sensor_5(0)
    , sensor_6(0)  {
    }
  ultrasound_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , sensor_1(0)
    , sensor_2(0)
    , sensor_3(0)
    , sensor_4(0)
    , sensor_5(0)
    , sensor_6(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _sensor_1_type;
  _sensor_1_type sensor_1;

   typedef uint32_t _sensor_2_type;
  _sensor_2_type sensor_2;

   typedef uint32_t _sensor_3_type;
  _sensor_3_type sensor_3;

   typedef uint32_t _sensor_4_type;
  _sensor_4_type sensor_4;

   typedef uint32_t _sensor_5_type;
  _sensor_5_type sensor_5;

   typedef uint32_t _sensor_6_type;
  _sensor_6_type sensor_6;





  typedef boost::shared_ptr< ::sdv_serial::ultrasound_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sdv_serial::ultrasound_<ContainerAllocator> const> ConstPtr;

}; // struct ultrasound_

typedef ::sdv_serial::ultrasound_<std::allocator<void> > ultrasound;

typedef boost::shared_ptr< ::sdv_serial::ultrasound > ultrasoundPtr;
typedef boost::shared_ptr< ::sdv_serial::ultrasound const> ultrasoundConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sdv_serial::ultrasound_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sdv_serial::ultrasound_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sdv_serial::ultrasound_<ContainerAllocator1> & lhs, const ::sdv_serial::ultrasound_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.sensor_1 == rhs.sensor_1 &&
    lhs.sensor_2 == rhs.sensor_2 &&
    lhs.sensor_3 == rhs.sensor_3 &&
    lhs.sensor_4 == rhs.sensor_4 &&
    lhs.sensor_5 == rhs.sensor_5 &&
    lhs.sensor_6 == rhs.sensor_6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sdv_serial::ultrasound_<ContainerAllocator1> & lhs, const ::sdv_serial::ultrasound_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sdv_serial

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::sdv_serial::ultrasound_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sdv_serial::ultrasound_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdv_serial::ultrasound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sdv_serial::ultrasound_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_serial::ultrasound_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sdv_serial::ultrasound_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sdv_serial::ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c80239b21235e64744244a0b31a2c700";
  }

  static const char* value(const ::sdv_serial::ultrasound_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc80239b21235e647ULL;
  static const uint64_t static_value2 = 0x44244a0b31a2c700ULL;
};

template<class ContainerAllocator>
struct DataType< ::sdv_serial::ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sdv_serial/ultrasound";
  }

  static const char* value(const ::sdv_serial::ultrasound_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sdv_serial::ultrasound_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ultrasound.msg\n"
"\n"
"Header header\n"
"uint32 sensor_1\n"
"uint32 sensor_2\n"
"uint32 sensor_3\n"
"uint32 sensor_4\n"
"uint32 sensor_5\n"
"uint32 sensor_6\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::sdv_serial::ultrasound_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sdv_serial::ultrasound_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.sensor_1);
      stream.next(m.sensor_2);
      stream.next(m.sensor_3);
      stream.next(m.sensor_4);
      stream.next(m.sensor_5);
      stream.next(m.sensor_6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ultrasound_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sdv_serial::ultrasound_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sdv_serial::ultrasound_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "sensor_1: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_1);
    s << indent << "sensor_2: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_2);
    s << indent << "sensor_3: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_3);
    s << indent << "sensor_4: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_4);
    s << indent << "sensor_5: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_5);
    s << indent << "sensor_6: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.sensor_6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SDV_SERIAL_MESSAGE_ULTRASOUND_H
