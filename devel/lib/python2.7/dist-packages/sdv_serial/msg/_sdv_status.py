# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from sdv_serial/sdv_status.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class sdv_status(genpy.Message):
  _md5sum = "c5e0403860ad18cd570582530bdd6690"
  _type = "sdv_serial/sdv_status"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# sdv_status.msg

Header header
bool energized
bool stand_by
bool rotate
bool turn_left
bool turn_right
bool reverse
bool forward
bool low_batt
bool emergency_stop
bool reset_pc
bool poweroff_pc
bool obstacle_stop
bool over_load
bool connection_error
bool tag_disconnected
bool tag_init
bool tag_is_on_platform
bool tag_read_error
bool tag_write_error
bool tag_close
bool not_connection_error
bool connection_error_imu
bool connection_error_msp
bool connection_error_rfid
bool connection_error_ult
bool connection_error_batt

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  __slots__ = ['header','energized','stand_by','rotate','turn_left','turn_right','reverse','forward','low_batt','emergency_stop','reset_pc','poweroff_pc','obstacle_stop','over_load','connection_error','tag_disconnected','tag_init','tag_is_on_platform','tag_read_error','tag_write_error','tag_close','not_connection_error','connection_error_imu','connection_error_msp','connection_error_rfid','connection_error_ult','connection_error_batt']
  _slot_types = ['std_msgs/Header','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,energized,stand_by,rotate,turn_left,turn_right,reverse,forward,low_batt,emergency_stop,reset_pc,poweroff_pc,obstacle_stop,over_load,connection_error,tag_disconnected,tag_init,tag_is_on_platform,tag_read_error,tag_write_error,tag_close,not_connection_error,connection_error_imu,connection_error_msp,connection_error_rfid,connection_error_ult,connection_error_batt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(sdv_status, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.energized is None:
        self.energized = False
      if self.stand_by is None:
        self.stand_by = False
      if self.rotate is None:
        self.rotate = False
      if self.turn_left is None:
        self.turn_left = False
      if self.turn_right is None:
        self.turn_right = False
      if self.reverse is None:
        self.reverse = False
      if self.forward is None:
        self.forward = False
      if self.low_batt is None:
        self.low_batt = False
      if self.emergency_stop is None:
        self.emergency_stop = False
      if self.reset_pc is None:
        self.reset_pc = False
      if self.poweroff_pc is None:
        self.poweroff_pc = False
      if self.obstacle_stop is None:
        self.obstacle_stop = False
      if self.over_load is None:
        self.over_load = False
      if self.connection_error is None:
        self.connection_error = False
      if self.tag_disconnected is None:
        self.tag_disconnected = False
      if self.tag_init is None:
        self.tag_init = False
      if self.tag_is_on_platform is None:
        self.tag_is_on_platform = False
      if self.tag_read_error is None:
        self.tag_read_error = False
      if self.tag_write_error is None:
        self.tag_write_error = False
      if self.tag_close is None:
        self.tag_close = False
      if self.not_connection_error is None:
        self.not_connection_error = False
      if self.connection_error_imu is None:
        self.connection_error_imu = False
      if self.connection_error_msp is None:
        self.connection_error_msp = False
      if self.connection_error_rfid is None:
        self.connection_error_rfid = False
      if self.connection_error_ult is None:
        self.connection_error_ult = False
      if self.connection_error_batt is None:
        self.connection_error_batt = False
    else:
      self.header = std_msgs.msg.Header()
      self.energized = False
      self.stand_by = False
      self.rotate = False
      self.turn_left = False
      self.turn_right = False
      self.reverse = False
      self.forward = False
      self.low_batt = False
      self.emergency_stop = False
      self.reset_pc = False
      self.poweroff_pc = False
      self.obstacle_stop = False
      self.over_load = False
      self.connection_error = False
      self.tag_disconnected = False
      self.tag_init = False
      self.tag_is_on_platform = False
      self.tag_read_error = False
      self.tag_write_error = False
      self.tag_close = False
      self.not_connection_error = False
      self.connection_error_imu = False
      self.connection_error_msp = False
      self.connection_error_rfid = False
      self.connection_error_ult = False
      self.connection_error_batt = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26B().pack(_x.energized, _x.stand_by, _x.rotate, _x.turn_left, _x.turn_right, _x.reverse, _x.forward, _x.low_batt, _x.emergency_stop, _x.reset_pc, _x.poweroff_pc, _x.obstacle_stop, _x.over_load, _x.connection_error, _x.tag_disconnected, _x.tag_init, _x.tag_is_on_platform, _x.tag_read_error, _x.tag_write_error, _x.tag_close, _x.not_connection_error, _x.connection_error_imu, _x.connection_error_msp, _x.connection_error_rfid, _x.connection_error_ult, _x.connection_error_batt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.energized, _x.stand_by, _x.rotate, _x.turn_left, _x.turn_right, _x.reverse, _x.forward, _x.low_batt, _x.emergency_stop, _x.reset_pc, _x.poweroff_pc, _x.obstacle_stop, _x.over_load, _x.connection_error, _x.tag_disconnected, _x.tag_init, _x.tag_is_on_platform, _x.tag_read_error, _x.tag_write_error, _x.tag_close, _x.not_connection_error, _x.connection_error_imu, _x.connection_error_msp, _x.connection_error_rfid, _x.connection_error_ult, _x.connection_error_batt,) = _get_struct_26B().unpack(str[start:end])
      self.energized = bool(self.energized)
      self.stand_by = bool(self.stand_by)
      self.rotate = bool(self.rotate)
      self.turn_left = bool(self.turn_left)
      self.turn_right = bool(self.turn_right)
      self.reverse = bool(self.reverse)
      self.forward = bool(self.forward)
      self.low_batt = bool(self.low_batt)
      self.emergency_stop = bool(self.emergency_stop)
      self.reset_pc = bool(self.reset_pc)
      self.poweroff_pc = bool(self.poweroff_pc)
      self.obstacle_stop = bool(self.obstacle_stop)
      self.over_load = bool(self.over_load)
      self.connection_error = bool(self.connection_error)
      self.tag_disconnected = bool(self.tag_disconnected)
      self.tag_init = bool(self.tag_init)
      self.tag_is_on_platform = bool(self.tag_is_on_platform)
      self.tag_read_error = bool(self.tag_read_error)
      self.tag_write_error = bool(self.tag_write_error)
      self.tag_close = bool(self.tag_close)
      self.not_connection_error = bool(self.not_connection_error)
      self.connection_error_imu = bool(self.connection_error_imu)
      self.connection_error_msp = bool(self.connection_error_msp)
      self.connection_error_rfid = bool(self.connection_error_rfid)
      self.connection_error_ult = bool(self.connection_error_ult)
      self.connection_error_batt = bool(self.connection_error_batt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_26B().pack(_x.energized, _x.stand_by, _x.rotate, _x.turn_left, _x.turn_right, _x.reverse, _x.forward, _x.low_batt, _x.emergency_stop, _x.reset_pc, _x.poweroff_pc, _x.obstacle_stop, _x.over_load, _x.connection_error, _x.tag_disconnected, _x.tag_init, _x.tag_is_on_platform, _x.tag_read_error, _x.tag_write_error, _x.tag_close, _x.not_connection_error, _x.connection_error_imu, _x.connection_error_msp, _x.connection_error_rfid, _x.connection_error_ult, _x.connection_error_batt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 26
      (_x.energized, _x.stand_by, _x.rotate, _x.turn_left, _x.turn_right, _x.reverse, _x.forward, _x.low_batt, _x.emergency_stop, _x.reset_pc, _x.poweroff_pc, _x.obstacle_stop, _x.over_load, _x.connection_error, _x.tag_disconnected, _x.tag_init, _x.tag_is_on_platform, _x.tag_read_error, _x.tag_write_error, _x.tag_close, _x.not_connection_error, _x.connection_error_imu, _x.connection_error_msp, _x.connection_error_rfid, _x.connection_error_ult, _x.connection_error_batt,) = _get_struct_26B().unpack(str[start:end])
      self.energized = bool(self.energized)
      self.stand_by = bool(self.stand_by)
      self.rotate = bool(self.rotate)
      self.turn_left = bool(self.turn_left)
      self.turn_right = bool(self.turn_right)
      self.reverse = bool(self.reverse)
      self.forward = bool(self.forward)
      self.low_batt = bool(self.low_batt)
      self.emergency_stop = bool(self.emergency_stop)
      self.reset_pc = bool(self.reset_pc)
      self.poweroff_pc = bool(self.poweroff_pc)
      self.obstacle_stop = bool(self.obstacle_stop)
      self.over_load = bool(self.over_load)
      self.connection_error = bool(self.connection_error)
      self.tag_disconnected = bool(self.tag_disconnected)
      self.tag_init = bool(self.tag_init)
      self.tag_is_on_platform = bool(self.tag_is_on_platform)
      self.tag_read_error = bool(self.tag_read_error)
      self.tag_write_error = bool(self.tag_write_error)
      self.tag_close = bool(self.tag_close)
      self.not_connection_error = bool(self.not_connection_error)
      self.connection_error_imu = bool(self.connection_error_imu)
      self.connection_error_msp = bool(self.connection_error_msp)
      self.connection_error_rfid = bool(self.connection_error_rfid)
      self.connection_error_ult = bool(self.connection_error_ult)
      self.connection_error_batt = bool(self.connection_error_batt)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_26B = None
def _get_struct_26B():
    global _struct_26B
    if _struct_26B is None:
        _struct_26B = struct.Struct("<26B")
    return _struct_26B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
